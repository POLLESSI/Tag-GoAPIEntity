// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApi.Infrastructure.Data;

#nullable disable

namespace MyApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250323095556_RegistrationActivities")]
    partial class RegistrationActivities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ActivityEntityUserEntity", b =>
                {
                    b.Property<int>("OrganizedActivitiesId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizersId")
                        .HasColumnType("int");

                    b.HasKey("OrganizedActivitiesId", "OrganizersId");

                    b.HasIndex("OrganizersId");

                    b.ToTable("ActivityOrganizers", (string)null);
                });

            modelBuilder.Entity("ActivityEntityUserEntity1", b =>
                {
                    b.Property<int>("RegisteredActivitiesId")
                        .HasColumnType("int");

                    b.Property<int>("RegisteredsId")
                        .HasColumnType("int");

                    b.HasKey("RegisteredActivitiesId", "RegisteredsId");

                    b.HasIndex("RegisteredsId");

                    b.ToTable("ActivityRegistrations", (string)null);
                });

            modelBuilder.Entity("MyApi.Domain.Entities.ActivityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("longtext");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("MyApi.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ActivityEntityUserEntity", b =>
                {
                    b.HasOne("MyApi.Domain.Entities.ActivityEntity", null)
                        .WithMany()
                        .HasForeignKey("OrganizedActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApi.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("OrganizersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActivityEntityUserEntity1", b =>
                {
                    b.HasOne("MyApi.Domain.Entities.ActivityEntity", null)
                        .WithMany()
                        .HasForeignKey("RegisteredActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApi.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("RegisteredsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
